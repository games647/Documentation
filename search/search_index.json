{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CodeMC \u00b6 This site contains important pages around our CI site and how you can use it. Pages \u00b6 FAQ Jenkins GitHub Integrations Creating a Gradle Job Creating a Maven Job Deploy to the CodeMC Nexus","title":"Welcome"},{"location":"#welcome-to-codemc","text":"This site contains important pages around our CI site and how you can use it.","title":"Welcome to CodeMC"},{"location":"#pages","text":"FAQ Jenkins GitHub Integrations Creating a Gradle Job Creating a Maven Job Deploy to the CodeMC Nexus","title":"Pages"},{"location":"faq/","text":"FAQ \u00b6 Commonly asked questions about CodeMC and related projects. What is the NMS Maven Repository? \u00b6 Note Below, replace {version} with the version number you wish to use. The version syntax is similar to the Spigot API (e.g. 1.15.2-R0.1-SNAPSHOT ) Add the following parts to your pom.xml when using Maven: <repositories> <repository> <id> nms-repo </id> <url> https://repo.codemc.io/repository/nms/ </url> </repository> </repositories> <dependencies> <dependency> <groupId> org.spigotmc </groupId> <artifactId> spigot </artifactId> <version> {version} </version> <scope> provided </scope> </dependency> </dependencies> Add this to your build.gradle file when using Gradle: repositories { maven { url = \"https://repo.codemc.io/repository/nms/\" } } dependencies { compileOnly ( group: 'org.spigotmc' , name: 'spigot' , version: '{version}' ) } How can my project(s) be added to CodeMC? \u00b6 To get your project(s) added, join the CodeMC Discord and read the pinned message in the #request-access channel. Please stay patient when requesting to be added as we might have other things to do. My project isn't about Minecraft. Can I still be added? \u00b6 Yes, you can. CodeMC accepts nearly every open-source project, as long as it is Java-based (and follows the points in the above FAQ entry). I can't access any job configuration or folders in my Organisation. What is happening? \u00b6 You need to make sure to have granted access to your organisation when you logged in the first time. To check this, head over to your Connection Settings on GitHub and make sure to have granted the CodeMC application access to your account and organisations. How can I deploy my maven artifacts to the CodeMC repository? \u00b6 When using Maven, you can add the following settings to your pom.xml <distributionManagement> <repository> <id> codemc-releases </id> <url> https://repo.codemc.io/repository/maven-releases/ </url> </repository> <snapshotRepository> <id> codemc-snapshots </id> <url> https://repo.codemc.io/repository/maven-snapshots/ </url> </snapshotRepository> </distributionManagement> Alternatively, can you also execute an upload to the repository through the command line. Just execute the following maven command for that: clean install org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy -DaltSnapshotDeploymentRepository=codemc-snapshots::default::https://repo.codemc.io/repository/maven-snapshots/ -DaltReleaseDeploymentRepository=codemc-releases::default::https://repo.codemc.io/repository/maven-releases/ Important Make sure to have the right credentials for the deploy to be successful! If you're lost, ask a staff member on the Discord for support. How to build a JDK 8 Maven project? \u00b6 Jenkins dropped the official support for JDK 8 Maven builds, the following workaround is required: - Set the JDK version to JDK 11 - Add the following maven goal to the commandline: io.codemc.maven.plugins.toolchain:codemc-toolchain-selector:0.0.2-SNAPSHOT:select","title":"FAQ"},{"location":"faq/#faq","text":"Commonly asked questions about CodeMC and related projects.","title":"FAQ"},{"location":"faq/#what-is-the-nms-maven-repository","text":"Note Below, replace {version} with the version number you wish to use. The version syntax is similar to the Spigot API (e.g. 1.15.2-R0.1-SNAPSHOT ) Add the following parts to your pom.xml when using Maven: <repositories> <repository> <id> nms-repo </id> <url> https://repo.codemc.io/repository/nms/ </url> </repository> </repositories> <dependencies> <dependency> <groupId> org.spigotmc </groupId> <artifactId> spigot </artifactId> <version> {version} </version> <scope> provided </scope> </dependency> </dependencies> Add this to your build.gradle file when using Gradle: repositories { maven { url = \"https://repo.codemc.io/repository/nms/\" } } dependencies { compileOnly ( group: 'org.spigotmc' , name: 'spigot' , version: '{version}' ) }","title":"What is the NMS Maven Repository?"},{"location":"faq/#how-can-my-projects-be-added-to-codemc","text":"To get your project(s) added, join the CodeMC Discord and read the pinned message in the #request-access channel. Please stay patient when requesting to be added as we might have other things to do.","title":"How can my project(s) be added to CodeMC?"},{"location":"faq/#my-project-isnt-about-minecraft-can-i-still-be-added","text":"Yes, you can. CodeMC accepts nearly every open-source project, as long as it is Java-based (and follows the points in the above FAQ entry).","title":"My project isn't about Minecraft. Can I still be added?"},{"location":"faq/#i-cant-access-any-job-configuration-or-folders-in-my-organisation-what-is-happening","text":"You need to make sure to have granted access to your organisation when you logged in the first time. To check this, head over to your Connection Settings on GitHub and make sure to have granted the CodeMC application access to your account and organisations.","title":"I can't access any job configuration or folders in my Organisation. What is happening?"},{"location":"faq/#how-can-i-deploy-my-maven-artifacts-to-the-codemc-repository","text":"When using Maven, you can add the following settings to your pom.xml <distributionManagement> <repository> <id> codemc-releases </id> <url> https://repo.codemc.io/repository/maven-releases/ </url> </repository> <snapshotRepository> <id> codemc-snapshots </id> <url> https://repo.codemc.io/repository/maven-snapshots/ </url> </snapshotRepository> </distributionManagement> Alternatively, can you also execute an upload to the repository through the command line. Just execute the following maven command for that: clean install org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy -DaltSnapshotDeploymentRepository=codemc-snapshots::default::https://repo.codemc.io/repository/maven-snapshots/ -DaltReleaseDeploymentRepository=codemc-releases::default::https://repo.codemc.io/repository/maven-releases/ Important Make sure to have the right credentials for the deploy to be successful! If you're lost, ask a staff member on the Discord for support.","title":"How can I deploy my maven artifacts to the CodeMC repository?"},{"location":"faq/#how-to-build-a-jdk-8-maven-project","text":"Jenkins dropped the official support for JDK 8 Maven builds, the following workaround is required: - Set the JDK version to JDK 11 - Add the following maven goal to the commandline: io.codemc.maven.plugins.toolchain:codemc-toolchain-selector:0.0.2-SNAPSHOT:select","title":"How to build a JDK 8 Maven project?"},{"location":"jenkins/","text":"GitHub \u00b6 Below can you find a list of pages about GitHub related topics of CodeMC. Pages \u00b6 Integrating into GitHub Creating a Gradle Job Creating a Maven Job Deploy to the CodeMC Nexus","title":"Jenkins Docs"},{"location":"jenkins/#github","text":"Below can you find a list of pages about GitHub related topics of CodeMC.","title":"GitHub"},{"location":"jenkins/#pages","text":"Integrating into GitHub Creating a Gradle Job Creating a Maven Job Deploy to the CodeMC Nexus","title":"Pages"},{"location":"jenkins/deploy/","text":"Deploying to the CodeMC Nexus \u00b6 CodeMC offers you a way to upload your API or project to a Nexus Repository, so that other developers can integrate it into their own projects to use. This page here will explain how you can achieve this. Important You can only deploy your project to the Nexus from within your Jenkins Project. If you try to deploy from outside of it will you receive an \"Unauthorized\" exception. Prerequisites \u00b6 Before you can publish your project to the nexus will you need to make a few first steps to have everything setup and running. Login \u00b6 To get started, first go to your project's Jenkins Page on CodeMC ( https://ci.codemc.io/job/:user/job/:project ) and login to your account if you didn't already. Configure Project \u00b6 On the project's page, click :fontawesome-solid-cog: Configure to go to the project settings. From there, scroll down to the Build Enviroment section and click on Use secret text(s) or file(s) . A new section called Bindings should now open. Click the Add button and select Username and password (separated) . You should now see two text fields called Username Variable and Password Variable respectively. Enter the names for the User and Password Variable that you want to use. You can name them whatever you want, but remember to note them down somewhere to use later. Note Do NOT enter your actual username and password in those fields. They are only used to define the Enviroment Variables used on Jenkins. Under Credentials leave Specific credentials selected and use jenkins-deploy/****** (jenkins-deploy) from the dropdown menu. Continue to the Build section. No Build step set? If you don't have a Build set create one as follows: Apache Maven icon Maven Gradle icon Gradle Change Maven Version to that of your project's used and set Root POM to the path to your pom.xml file (Usually just pom.xml ). In the Goals and options field, put clean install deploy Click Add build step and select Invoke Gradle script . Click Use Gradle Wrapper and make sure that Make gradlew executable is checked. In the Tasks field put clean publish Configure Maven/Gradle \u00b6 After you've setup your Jenkins Project properly can you now continue to add the right information into your pom.xml , build.gradle or build.gradle.kts file. File Setup Apache Maven icon pom.xml Gradle icon build.gradle Kotlin icon build.gradle.kts <distributionManagement> <repository> <id> codemc-releases </id> <url> https://repo.codemc.io/repository/maven-releases/ </url> </repository> <snapshotRepository> <id> codemc-snapshots </id> <url> https://repo.codemc.io/repository/maven-snapshots/ </url> </snapshotRepository> </distributionManagement> Source plugins { id 'maven-publish' } group = \"your.project.group\" version = \"1.0.0\" publishing { publications { mavenJava ( MavenPublication ) { groupId = group artifactId = \"YourArtifactName\" version = project . version from components . java } } repositories { maven { def snapshotUrl = \"https://repo.codemc.io/repository/maven-snapshots/\" def releaseUrl = \"https://repo.codemc.io/repository/maven-releases/\" // You can use any other check here to set what URL should be used. url = project . version . endsWith ( \"SNAPSHOT\" ) ? snapshotUrl : releaseUrl // ORG_GRADLE_PROJECT_mavenUsername and ORG_GRADLE_PROJECT_mavenPassword are the enviroments you defined before. def mavenUsername = System . getenv ( \"ORG_GRADLE_PROJECT_mavenUsername\" ) ? System . getenv ( \"ORG_GRADLE_PROJECT_mavenUsername\" ) : null def mavenPassword = System . getenv ( \"ORG_GRADLE_PROJECT_mavenPassword\" ) ? System . getenv ( \"ORG_GRADLE_PROJECT_mavenPassword\" ) : null if ( mavenUsername != null && mavenPassword != null ) { credentials { username = mavenUsername password = mavenPassword } } } } } Source plugins { ' maven - publish ' } group = \"your.project.group\" version = \"1.0.0\" publishing { publications { create < MavenPublication > ( \"mavenJava\" ) { groupId = group artifactId = \"YourArtifactName\" version = project . version from ( components [ \"java\" ] ) } } repositories { val mavenUrl : String? by project val mavenSnapshotUrl : String? by project ( if ( version . toString (). endsWith ( \"SNAPSHOT\" )) mavenSnapshotUrl else mavenUrl ) ?. let { url -> maven ( url ) { val mavenUsername : String? by project val mavenPassword : String? by project if ( mavenUsername != null && mavenPassword != null ) { credentials { username = mavenUsername password = mavenPassword } } } } } } Once finished can you now push the changes to your repository and trigger a build on CodeMC to get your project published to the repository. See the GitHub Integration page on how to do this automatically.","title":"Deploy to the CodeMC Nexus"},{"location":"jenkins/deploy/#deploying-to-the-codemc-nexus","text":"CodeMC offers you a way to upload your API or project to a Nexus Repository, so that other developers can integrate it into their own projects to use. This page here will explain how you can achieve this. Important You can only deploy your project to the Nexus from within your Jenkins Project. If you try to deploy from outside of it will you receive an \"Unauthorized\" exception.","title":"Deploying to the CodeMC Nexus"},{"location":"jenkins/deploy/#prerequisites","text":"Before you can publish your project to the nexus will you need to make a few first steps to have everything setup and running.","title":"Prerequisites"},{"location":"jenkins/deploy/#login","text":"To get started, first go to your project's Jenkins Page on CodeMC ( https://ci.codemc.io/job/:user/job/:project ) and login to your account if you didn't already.","title":"Login"},{"location":"jenkins/deploy/#configure-project","text":"On the project's page, click :fontawesome-solid-cog: Configure to go to the project settings. From there, scroll down to the Build Enviroment section and click on Use secret text(s) or file(s) . A new section called Bindings should now open. Click the Add button and select Username and password (separated) . You should now see two text fields called Username Variable and Password Variable respectively. Enter the names for the User and Password Variable that you want to use. You can name them whatever you want, but remember to note them down somewhere to use later. Note Do NOT enter your actual username and password in those fields. They are only used to define the Enviroment Variables used on Jenkins. Under Credentials leave Specific credentials selected and use jenkins-deploy/****** (jenkins-deploy) from the dropdown menu. Continue to the Build section. No Build step set? If you don't have a Build set create one as follows: Apache Maven icon Maven Gradle icon Gradle Change Maven Version to that of your project's used and set Root POM to the path to your pom.xml file (Usually just pom.xml ). In the Goals and options field, put clean install deploy Click Add build step and select Invoke Gradle script . Click Use Gradle Wrapper and make sure that Make gradlew executable is checked. In the Tasks field put clean publish","title":"Configure Project"},{"location":"jenkins/deploy/#configure-mavengradle","text":"After you've setup your Jenkins Project properly can you now continue to add the right information into your pom.xml , build.gradle or build.gradle.kts file. File Setup Apache Maven icon pom.xml Gradle icon build.gradle Kotlin icon build.gradle.kts <distributionManagement> <repository> <id> codemc-releases </id> <url> https://repo.codemc.io/repository/maven-releases/ </url> </repository> <snapshotRepository> <id> codemc-snapshots </id> <url> https://repo.codemc.io/repository/maven-snapshots/ </url> </snapshotRepository> </distributionManagement> Source plugins { id 'maven-publish' } group = \"your.project.group\" version = \"1.0.0\" publishing { publications { mavenJava ( MavenPublication ) { groupId = group artifactId = \"YourArtifactName\" version = project . version from components . java } } repositories { maven { def snapshotUrl = \"https://repo.codemc.io/repository/maven-snapshots/\" def releaseUrl = \"https://repo.codemc.io/repository/maven-releases/\" // You can use any other check here to set what URL should be used. url = project . version . endsWith ( \"SNAPSHOT\" ) ? snapshotUrl : releaseUrl // ORG_GRADLE_PROJECT_mavenUsername and ORG_GRADLE_PROJECT_mavenPassword are the enviroments you defined before. def mavenUsername = System . getenv ( \"ORG_GRADLE_PROJECT_mavenUsername\" ) ? System . getenv ( \"ORG_GRADLE_PROJECT_mavenUsername\" ) : null def mavenPassword = System . getenv ( \"ORG_GRADLE_PROJECT_mavenPassword\" ) ? System . getenv ( \"ORG_GRADLE_PROJECT_mavenPassword\" ) : null if ( mavenUsername != null && mavenPassword != null ) { credentials { username = mavenUsername password = mavenPassword } } } } } Source plugins { ' maven - publish ' } group = \"your.project.group\" version = \"1.0.0\" publishing { publications { create < MavenPublication > ( \"mavenJava\" ) { groupId = group artifactId = \"YourArtifactName\" version = project . version from ( components [ \"java\" ] ) } } repositories { val mavenUrl : String? by project val mavenSnapshotUrl : String? by project ( if ( version . toString (). endsWith ( \"SNAPSHOT\" )) mavenSnapshotUrl else mavenUrl ) ?. let { url -> maven ( url ) { val mavenUsername : String? by project val mavenPassword : String? by project if ( mavenUsername != null && mavenPassword != null ) { credentials { username = mavenUsername password = mavenPassword } } } } } } Once finished can you now push the changes to your repository and trigger a build on CodeMC to get your project published to the repository. See the GitHub Integration page on how to do this automatically.","title":"Configure Maven/Gradle"},{"location":"jenkins/github-integration/","text":"GitHub Integrations \u00b6 Below can you find some tutorial to integrate the CI server of CodeMC into GitHub (or vice-versa). Add CommitStatus \u00b6 To add a CommitStatus of CodeMC to GitHub, follow these basic steps: Go to https://github.com/settings/tokens Click Generate new token Give the token a descriptive name (i.e. CodeMC-CommitStatus ) and grant it the following Scopes: repo admin:repo_hook admin:org_hook Click on Generate token and copy the generated code. Head over to https://ci.codemc.io/job/:organisation (replace :organisation with your user/organisation name) Click on Configure and under Projects, click the Add button right next to the Credentials field. A drop-down menu should now open. Click your user/organisation name. Eneter your username and use the copied token as password. Then Click Add . Select the credentials in the drop-down menu and click Save . You're done! Automatically build \u00b6 When you want CodeMC to automatically build artefacts once you push commits to your repository, can you follow these steps: Organisations \u00b6 Important These webhooks will work for events fired on repositories of the entire Organisations. If you only want webhooks to be triggered for specific repositories, setup one for a specific repository Go to https://github.com/organizations/:organisation/settings/hooks (Replace :organisation with the name of your organisation). Click Add webhook Put https://ci.codemc.io/github-webhook/ as the Payload URL. Under Which events would you like to trigger this webhook? select Let me select individual events and enable the below options: Pull requests Pushes Repositories Note You can also leave the setting on \"Just the push event\" if you only want pushes to trigger it Click Add Webhook You're done! Repositories \u00b6 Go to https://github.com/:user/:repo/settings/hooks (Replace :user with your user/organisation name and :repo with the repository name). Click Add webhook Put https://ci.codemc.io/github-webhook/ as the Payload URL. Under Which events would you like to trigger this webhook? select Let me select individual events and enable the below options: Pull requests Pushes Repositories Note You can also leave the setting on \"Just the push event\" if you only want pushes to trigger it Click Add Webhook You're done!","title":"Integrating into GitHub"},{"location":"jenkins/github-integration/#github-integrations","text":"Below can you find some tutorial to integrate the CI server of CodeMC into GitHub (or vice-versa).","title":"GitHub Integrations"},{"location":"jenkins/github-integration/#add-commitstatus","text":"To add a CommitStatus of CodeMC to GitHub, follow these basic steps: Go to https://github.com/settings/tokens Click Generate new token Give the token a descriptive name (i.e. CodeMC-CommitStatus ) and grant it the following Scopes: repo admin:repo_hook admin:org_hook Click on Generate token and copy the generated code. Head over to https://ci.codemc.io/job/:organisation (replace :organisation with your user/organisation name) Click on Configure and under Projects, click the Add button right next to the Credentials field. A drop-down menu should now open. Click your user/organisation name. Eneter your username and use the copied token as password. Then Click Add . Select the credentials in the drop-down menu and click Save . You're done!","title":"Add CommitStatus"},{"location":"jenkins/github-integration/#automatically-build","text":"When you want CodeMC to automatically build artefacts once you push commits to your repository, can you follow these steps:","title":"Automatically build"},{"location":"jenkins/github-integration/#organisations","text":"Important These webhooks will work for events fired on repositories of the entire Organisations. If you only want webhooks to be triggered for specific repositories, setup one for a specific repository Go to https://github.com/organizations/:organisation/settings/hooks (Replace :organisation with the name of your organisation). Click Add webhook Put https://ci.codemc.io/github-webhook/ as the Payload URL. Under Which events would you like to trigger this webhook? select Let me select individual events and enable the below options: Pull requests Pushes Repositories Note You can also leave the setting on \"Just the push event\" if you only want pushes to trigger it Click Add Webhook You're done!","title":"Organisations"},{"location":"jenkins/github-integration/#repositories","text":"Go to https://github.com/:user/:repo/settings/hooks (Replace :user with your user/organisation name and :repo with the repository name). Click Add webhook Put https://ci.codemc.io/github-webhook/ as the Payload URL. Under Which events would you like to trigger this webhook? select Let me select individual events and enable the below options: Pull requests Pushes Repositories Note You can also leave the setting on \"Just the push event\" if you only want pushes to trigger it Click Add Webhook You're done!","title":"Repositories"},{"location":"jenkins/gradle/","text":"Creating a Gradle Job \u00b6 This page explains you step by step how to create a Build job on CodeMC for a Gradle Project. For how to add a Maven project, check the Creating a Maven Job page . Creating the Job \u00b6 Important In order to create a job will you need to be added to the Site first, if you haven't already. To get added, join the Discord Server and follow the instructions in the #info channel. Go to https://ci.codemc.io/view/Author/job/:user/newJob (Replace :user with your user/organisation name) Enter the job name in the top text box, and select Freestyle project . Click the OK button at the bottom of the page. Your job is now created! You should be redirected to the configuration page. Configuration \u00b6 Here are some recommendet configuration settings to set. SCM \u00b6 In the Source Code Management (SCM) section, click on the git radio button. Click on Add repository and paste your repository URL in the corresponding text field. If you want to build only a specific branch, can you define it in the Branch Specifier field. Build Trigger (Optional) \u00b6 Note that you can configure CodeMC to automatically build each time you push changes to GitHub. A tutorial for this can be found here . Click on Poll SCM Put */5 * * * * in the large text field, to make CodeMC check your GitHub project every 5 minutes. Build Environment (Optional) \u00b6 It's recommended to enable Add timestamps to the Console Output Build \u00b6 Click on Add build step Select Invoke Gradle script Click on the Use Gradle Wrapper radio button. Click on Make gradlew executable . Insert your task into the task field. This is often something like clean build Post-build Actions \u00b6 Click on the Add post-build action button. Select Archive the artifacts . In Files to archive specify the folder, where Gradle puts the build artifacts (Usually **/build/libs/*.jar ) Finishing \u00b6 Click the Save button. All changes will now be saved and applied and you will be redirected to your job's page. To launch your first build, click the Build Now button on the left side. CodeMC will now queue a build job and execute it. If you want to see the console of it, click on the rotating icon next to the build number under the Build History section.","title":"Creating a Gradle Job"},{"location":"jenkins/gradle/#creating-a-gradle-job","text":"This page explains you step by step how to create a Build job on CodeMC for a Gradle Project. For how to add a Maven project, check the Creating a Maven Job page .","title":"Creating a Gradle Job"},{"location":"jenkins/gradle/#creating-the-job","text":"Important In order to create a job will you need to be added to the Site first, if you haven't already. To get added, join the Discord Server and follow the instructions in the #info channel. Go to https://ci.codemc.io/view/Author/job/:user/newJob (Replace :user with your user/organisation name) Enter the job name in the top text box, and select Freestyle project . Click the OK button at the bottom of the page. Your job is now created! You should be redirected to the configuration page.","title":"Creating the Job"},{"location":"jenkins/gradle/#configuration","text":"Here are some recommendet configuration settings to set.","title":"Configuration"},{"location":"jenkins/gradle/#scm","text":"In the Source Code Management (SCM) section, click on the git radio button. Click on Add repository and paste your repository URL in the corresponding text field. If you want to build only a specific branch, can you define it in the Branch Specifier field.","title":"SCM"},{"location":"jenkins/gradle/#build-trigger-optional","text":"Note that you can configure CodeMC to automatically build each time you push changes to GitHub. A tutorial for this can be found here . Click on Poll SCM Put */5 * * * * in the large text field, to make CodeMC check your GitHub project every 5 minutes.","title":"Build Trigger (Optional)"},{"location":"jenkins/gradle/#build-environment-optional","text":"It's recommended to enable Add timestamps to the Console Output","title":"Build Environment (Optional)"},{"location":"jenkins/gradle/#build","text":"Click on Add build step Select Invoke Gradle script Click on the Use Gradle Wrapper radio button. Click on Make gradlew executable . Insert your task into the task field. This is often something like clean build","title":"Build"},{"location":"jenkins/gradle/#post-build-actions","text":"Click on the Add post-build action button. Select Archive the artifacts . In Files to archive specify the folder, where Gradle puts the build artifacts (Usually **/build/libs/*.jar )","title":"Post-build Actions"},{"location":"jenkins/gradle/#finishing","text":"Click the Save button. All changes will now be saved and applied and you will be redirected to your job's page. To launch your first build, click the Build Now button on the left side. CodeMC will now queue a build job and execute it. If you want to see the console of it, click on the rotating icon next to the build number under the Build History section.","title":"Finishing"},{"location":"jenkins/maven/","text":"Creating a Maven Job \u00b6 This page explains you step by step how to create a Build job on CodeMC for a Maven Project. For how to add a Gradle project, check the Creating a Gradle Job page . Creating the Job \u00b6 Important In order to create a job will you need to be added to the Site first, if you haven't already. To get added, join the Discord Server and follow the instructions in the #info channel. Go to https://ci.codemc.io/job/:user/newJob (Replace :user with your user/organisation name) Enter the job name in the top text box, and select Maven project . Click the OK button at the bottom of the page. Your job is now created! You should be redirected to the configuration page. Configuration \u00b6 Here are some recommendet configuration settings to set. SCM \u00b6 In the Source Code Management (SCM) section, click on the git radio button. Click on Add repository and paste your repository URL in the corresponding text field. If you want to build only a specific branch, can you define it in the Branch Specifier field. Build Trigger (Optional) \u00b6 Note that you can configure CodeMC to automatically build each time you push changes to GitHub. A tutorial for this can be found here . Click on Poll SCM Put */5 * * * * in the large text field, to make CodeMC check your GitHub project every 5 minutes. Build Environment (Optional) \u00b6 It's recommended to enable Add timestamps to the Console Output Build \u00b6 Important In order to build a maven project using JDK 8 you will have to use a workaround Write the path to your pom.xml in the Root POM field. In the Goals and options field, set your default maven goals. If you want to deploy the artifacts to the CodeMC repository will you need to follow the steps explained in the FAQ Post-build Actions \u00b6 Click on the Add post-build action button. Select Archive the artifacts . In Files to archive put target/*.jar (default build directory) or **/target/*.jar for multi-module projects. Click on the Advanced button and set **/target/original-*.jar in the Exclusions field. Finishing \u00b6 Click the Save button. All changes will now be saved and applied and you will be redirected to your job's page. To launch your first build, click the Build Now button on the left side. CodeMC will now queue a build job and execute it. If you want to see the console of it, click on the rotating icon next to the build number under the Build History section.","title":"Creating a Maven Job"},{"location":"jenkins/maven/#creating-a-maven-job","text":"This page explains you step by step how to create a Build job on CodeMC for a Maven Project. For how to add a Gradle project, check the Creating a Gradle Job page .","title":"Creating a Maven Job"},{"location":"jenkins/maven/#creating-the-job","text":"Important In order to create a job will you need to be added to the Site first, if you haven't already. To get added, join the Discord Server and follow the instructions in the #info channel. Go to https://ci.codemc.io/job/:user/newJob (Replace :user with your user/organisation name) Enter the job name in the top text box, and select Maven project . Click the OK button at the bottom of the page. Your job is now created! You should be redirected to the configuration page.","title":"Creating the Job"},{"location":"jenkins/maven/#configuration","text":"Here are some recommendet configuration settings to set.","title":"Configuration"},{"location":"jenkins/maven/#scm","text":"In the Source Code Management (SCM) section, click on the git radio button. Click on Add repository and paste your repository URL in the corresponding text field. If you want to build only a specific branch, can you define it in the Branch Specifier field.","title":"SCM"},{"location":"jenkins/maven/#build-trigger-optional","text":"Note that you can configure CodeMC to automatically build each time you push changes to GitHub. A tutorial for this can be found here . Click on Poll SCM Put */5 * * * * in the large text field, to make CodeMC check your GitHub project every 5 minutes.","title":"Build Trigger (Optional)"},{"location":"jenkins/maven/#build-environment-optional","text":"It's recommended to enable Add timestamps to the Console Output","title":"Build Environment (Optional)"},{"location":"jenkins/maven/#build","text":"Important In order to build a maven project using JDK 8 you will have to use a workaround Write the path to your pom.xml in the Root POM field. In the Goals and options field, set your default maven goals. If you want to deploy the artifacts to the CodeMC repository will you need to follow the steps explained in the FAQ","title":"Build"},{"location":"jenkins/maven/#post-build-actions","text":"Click on the Add post-build action button. Select Archive the artifacts . In Files to archive put target/*.jar (default build directory) or **/target/*.jar for multi-module projects. Click on the Advanced button and set **/target/original-*.jar in the Exclusions field.","title":"Post-build Actions"},{"location":"jenkins/maven/#finishing","text":"Click the Save button. All changes will now be saved and applied and you will be redirected to your job's page. To launch your first build, click the Build Now button on the left side. CodeMC will now queue a build job and execute it. If you want to see the console of it, click on the rotating icon next to the build number under the Build History section.","title":"Finishing"}]}